From e491e4797924fec05301ae3e1ef8b734c834a7f4 Mon Sep 17 00:00:00 2001
From: Juan Cruz Linsalata <LinsaFTW@users.noreply.github.com>
Date: Mon, 12 Oct 2020 15:40:53 -0300
Subject: [PATCH] FlameCord General Patch


diff --git a/flamecord/src/main/java/dev/_2lstudios/flamecord/FlameCord.java b/flamecord/src/main/java/dev/_2lstudios/flamecord/FlameCord.java
new file mode 100644
index 000000000..8e69160d0
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/flamecord/FlameCord.java
@@ -0,0 +1,35 @@
+package dev._2lstudios.flamecord;
+
+import java.util.Collection;
+import java.util.logging.Logger;
+
+import dev._2lstudios.flamecord.configuration.FlameCordConfiguration;
+import lombok.Getter;
+import net.md_5.bungee.config.ConfigurationProvider;
+import net.md_5.bungee.config.YamlConfiguration;
+
+public class FlameCord {
+    @Getter
+    private static FlameCord instance;
+
+    public static void reload(final Logger logger, final Collection<String> whitelistedAddresses) {
+        if (FlameCord.instance != null) {
+            instance.reload(logger);
+        } else {
+            FlameCord.instance = new FlameCord(logger, whitelistedAddresses);
+        }
+    }
+
+    @Getter
+    private FlameCordConfiguration flameCordConfiguration;
+
+    private void reload(final Logger logger) {
+        final ConfigurationProvider configurationProvider = ConfigurationProvider.getProvider(YamlConfiguration.class);
+
+        this.flameCordConfiguration = new FlameCordConfiguration(configurationProvider);
+    }
+
+    private FlameCord(final Logger logger, final Collection<String> whitelistedAddresses) {
+        reload(logger);
+    }
+}
\ No newline at end of file
diff --git a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameConfig.java b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameConfig.java
new file mode 100644
index 000000000..5589ce1b7
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameConfig.java
@@ -0,0 +1,42 @@
+package dev._2lstudios.flamecord.configuration;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashSet;
+
+import net.md_5.bungee.config.Configuration;
+
+public class FlameConfig {
+    double setIfUnexistant(final String arg1, final double arg2, final Configuration configuration) {
+        return (double) setIfUnexistant(arg1, (Object) arg2, configuration);
+    }
+
+    int setIfUnexistant(final String arg1, final int arg2, final Configuration configuration) {
+        return (int) setIfUnexistant(arg1, (Object) arg2, configuration);
+    }
+
+    boolean setIfUnexistant(final String arg1, final boolean arg2, final Configuration configuration) {
+        return (boolean) setIfUnexistant(arg1, (Object) arg2, configuration);
+    }
+
+    Object setIfUnexistant(final String arg1, final Object arg2, final Configuration configuration) {
+        if (!configuration.contains(arg1)) {
+            configuration.set(arg1, arg2);
+
+            return arg2;
+        } else {
+            return configuration.get(arg1);
+        }
+    }
+
+    Collection<String> setIfUnexistant(final String arg1, final Collection<String> arg2,
+            final Configuration configuration) {
+        if (!configuration.contains(arg1)) {
+            configuration.set(arg1, new ArrayList<>(arg2));
+
+            return arg2;
+        } else {
+            return new HashSet<>(configuration.getStringList(arg1));
+        }
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
new file mode 100644
index 000000000..c8148e902
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
@@ -0,0 +1,33 @@
+package dev._2lstudios.flamecord.configuration;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+
+import lombok.Getter;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+
+public class FlameCordConfiguration extends FlameConfig {
+    public FlameCordConfiguration(final ConfigurationProvider configurationProvider) {
+        try {
+            final String fileName = "./flamecord.yml";
+            final File configurationFile = new File(fileName);
+            final Configuration configuration;
+            final boolean configurationExists = configurationFile.exists();
+
+            if (!configurationExists) {
+                configuration = new Configuration();
+            } else {
+                configuration = configurationProvider.load(configurationFile);
+            }
+
+            configurationProvider.save(configuration, configurationFile);
+        } catch (final IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
new file mode 100644
index 000000000..00b074aaf
--- /dev/null
+++ b/flamecord/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
@@ -0,0 +1,142 @@
+package dev._2lstudios.flamecord.configuration;
+
+import java.io.File;
+import java.io.IOException;
+import java.text.MessageFormat;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Logger;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+
+public class MessagesConfiguration extends FlameConfig {
+	private final Logger logger;
+	private final Map<String, String> messages = new HashMap<>();
+
+	public MessagesConfiguration(final Logger logger, final ConfigurationProvider configurationProvider) {
+		this.logger = logger;
+
+		try {
+			final String fileName = "./messages.yml";
+			final File configurationFile = new File(fileName);
+			final Configuration configuration;
+			final boolean configurationExists = configurationFile.exists();
+
+			if (!configurationExists) {
+				configuration = new Configuration();
+			} else {
+				configuration = configurationProvider.load(configurationFile);
+			}
+
+			// BungeeCord
+			setIfUnexistant("alert", "&8[&4Alert&8]&r ", configuration);
+			setIfUnexistant("already_connected", "&cYou are already connected to this server!", configuration);
+			setIfUnexistant("already_connected_proxy", "&cYou are already connected to this proxy!", configuration);
+			setIfUnexistant("already_connecting", "&cAlready connecting to this server!", configuration);
+			setIfUnexistant("command_list_format", "&aServers:&r", configuration);
+			setIfUnexistant("command_list", "&a[{0}] &e({1}): &r{2}", configuration);
+			setIfUnexistant("connect_kick", "&cKicked whilst connecting to {0}: {1}", configuration);
+			setIfUnexistant("current_server", "&6You are currently connected to {0}.", configuration);
+			setIfUnexistant("fallback_kick",
+					"&cCould not connect to a default or fallback server, please try again later: {0}", configuration);
+			setIfUnexistant("fallback_lobby",
+					"&cCould not connect to target server, you have been moved to a fallback server.", configuration);
+			setIfUnexistant("lost_connection", "[Proxy] Lost connection to server.", configuration);
+			setIfUnexistant("mojang_fail", "Error occurred while contacting login servers, are they down?",
+					configuration);
+			setIfUnexistant("no_permission", "&cYou do not have permission to execute this command!", configuration);
+			setIfUnexistant("no_server", "&cThe specified server does not exist.", configuration);
+			setIfUnexistant("no_server_permission", "&cYou don't have permission to access this server.",
+					configuration);
+			setIfUnexistant("outdated_client", "Outdated client! Please use {0}", configuration);
+			setIfUnexistant("outdated_server", "Outdated server! I'm still on {0}", configuration);
+			setIfUnexistant("proxy_full", "Server is full!", configuration);
+			setIfUnexistant("restart", "[Proxy] Proxy restarting.", configuration);
+			setIfUnexistant("server_list", "&6You may connect to the following servers at this time: ", configuration);
+			setIfUnexistant("server_went_down",
+					"&cThe server you were previously on went down, you have been connected to a fallback server",
+					configuration);
+			setIfUnexistant("total_players", "Total players online: {0}", configuration);
+			setIfUnexistant("name_invalid", "Username contains invalid characters.", configuration);
+			setIfUnexistant("ping_cannot_connect", "&c[Bungee] Can't connect to server.", configuration);
+			setIfUnexistant("offline_mode_player", "Not authenticated with Minecraft.net", configuration);
+			setIfUnexistant("secure_profile_required", "A secure profile is required to join this server.", configuration);
+			setIfUnexistant("secure_profile_expired", "Secure profile expired.", configuration);
+			setIfUnexistant("secure_profile_invalid", "Secure profile invalid.", configuration);
+			setIfUnexistant("message_needed", "&cYou must supply a message.", configuration);
+			setIfUnexistant("error_occurred_player",
+					"&cAn error occurred while parsing your message. (Hover for details)", configuration);
+			setIfUnexistant("error_occurred_console", "&cAn error occurred while parsing your message: {0}",
+					configuration);
+			setIfUnexistant("server_command_hover_players", "{0} players", configuration);
+			setIfUnexistant("click_to_connect", "Click to connect to the server", configuration);
+			setIfUnexistant("username_needed", "&cPlease follow this command by a user name.", configuration);
+			setIfUnexistant("user_not_online", "&cThat user is not online.", configuration);
+			setIfUnexistant("user_online_at", "&a{0} &ris online at {1}", configuration);
+			setIfUnexistant("send_cmd_usage",
+					"&cNot enough arguments, usage: /send <server|player|all|current> <target>", configuration);
+			setIfUnexistant("player_only", "&cOnly in game players can use this command", configuration);
+			setIfUnexistant("you_got_summoned", "&6Summoned to {0} by {1}", configuration);
+			setIfUnexistant("command_perms_groups", "&6You have the following groups: {0}", configuration);
+			setIfUnexistant("command_perms_permission", "&9- {0}", configuration);
+			setIfUnexistant("command_ip", "&9IP of {0} is {1}", configuration);
+			setIfUnexistant("illegal_chat_characters", "&cIllegal characters in chat ({0})", configuration);
+
+			// FlameCord start - Antibot System
+			setIfUnexistant("antibot_accounts", "&c&lFlameCord\n\n&cYou have too many accounts! ({0})\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_fastchat", "&c&lFlameCord\n\n&cYou are chatting too fast!\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_firewall", "&c&lFlameCord\n\n&cYou are blocked from this server!\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_nickname", "&c&lFlameCord\n\n&cYour nickname was detected as bot! ({0})\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_password", "&c&lFlameCord\n\n&cYour password is used by other players! ({0})\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_ratelimit", "&c&lFlameCord\n\n&cYou are connecting too fast! ({0})\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_reconnect", "&c&lFlameCord\n\n&cReconnect {0} more times to enter!\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_country", "&c&lFlameCord\n\n&cYour country {0} is blacklisted!\n\n&cError? Contact us on discord.gg/gF36AT3", configuration);
+			setIfUnexistant("antibot_stats", "&c&lFlameCord Antibot Stats\n &7■ Total Pings: &a{0}\n &7■ Total Connections: &b{1}\n\n &7■ Current Pings: &a{2}\n &7■ Current Connections: &b{3}", configuration);
+			// FlameCord end - Antibot System
+
+			// FlameCord - Bungee Plugins Command
+			setIfUnexistant("flamecord_bplugins_nopermission", "&cYou don't have permission to do this!", configuration);
+			setIfUnexistant("flamecord_bplugins_separator", ", ", configuration);
+			setIfUnexistant("flamecord_bplugins_header", "&aPlugins ({0}): ", configuration);
+
+			// FlameCord - Bungee Plugins Command
+			setIfUnexistant("flamecord_bip_nopermission", "&cYou don't have permission to do this!", configuration);
+			setIfUnexistant("flamecord_bip_offline", "&cThe player is not online!", configuration);
+			setIfUnexistant("flamecord_bip_usage", "&c/bip <player>", configuration);
+			setIfUnexistant("flamecord_bip", "&aInformation about {0}&a:\n&aUUID: &b{1}\n&aIP: &b{2}\n&aPing: &b{3}ms\n&aLocale: &b{4}\n&aView Distance: &b{5}\n&aCurrent Server: &b{6}", configuration);
+
+			// FlameCord
+			setIfUnexistant("flamecord_reload", "&aAll files had been successfully reloaded!", configuration);
+			setIfUnexistant("flamecord_help",
+					"&aFlameCord&b {0}&a by&b LinsaFTW\n&e /flamecord reload&7 >&b Reloads FlameCord files!\n&e /flamecord firewall <add/remove> <ip>&7 >&b Firewall certain ips!\n&e /bplugins&7 >&b Show the plugin list!\n&e /bip <player>&7 >&b Show the ip and info of a player!\n&e /flamecord help&7 >&b Shows this message!",
+					configuration);
+			setIfUnexistant("flamecord_nopermission", "&cYou don't have permission to do this!", configuration);
+			setIfUnexistant("flamecord_firewall_help", "&c/flamecord firewall <add/remove> <ip>", configuration);
+			setIfUnexistant("flamecord_firewall_add", "&cThe ip {0} was added to the firewall!", configuration);
+			setIfUnexistant("flamecord_firewall_remove", "&cThe ip {0} was removed from the firewall!", configuration);
+
+			configurationProvider.save(configuration, configurationFile);
+
+			for (final String key : configuration.getKeys()) {
+				final Object value = configuration.get(key);
+
+				if (value instanceof String) {
+					this.messages.put(key, ChatColor.translateAlternateColorCodes('&', (String) value));
+				}
+			}
+		} catch (final IOException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public String getTranslation(final String name, final Object... args) {
+		if (!messages.containsKey(name)) {
+			logger.warning("[FlameCord] Tried to get translation '" + name
+					+ "' from messages.yml file but wasn't found. Please try resetting this file or report to a developer.");
+		}
+
+		return MessageFormat.format(messages.getOrDefault(name, "<translation '" + name + "' missing>"), args);
+	}
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 640f0ea26..70a1192e7 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -1,5 +1,6 @@
 package net.md_5.bungee.protocol;
 
+import dev._2lstudios.flamecord.FlameCord;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.channel.ChannelHandlerContext;
diff --git a/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java b/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java
new file mode 100644
index 000000000..91d60bfb3
--- /dev/null
+++ b/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java
@@ -0,0 +1,58 @@
+package dev._2lstudios.flamecord.commands;
+
+import java.util.Collection;
+import java.util.HashSet;
+
+import dev._2lstudios.flamecord.FlameCord;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.plugin.Command;
+
+public class FlameCordCommand extends Command {
+private final BungeeCord bungeeCord;
+
+    public FlameCordCommand(final BungeeCord bungeeCord) {
+        super("flamecord");
+
+        this.bungeeCord = bungeeCord;
+    }
+
+    @Override
+    public void execute(final CommandSender sender, final String[] args) {
+        final FlameCord flameCord = FlameCord.getInstance();
+
+        if (sender.hasPermission("flamecord.usage")) {
+            if (args.length > 0) {
+                final String arg0 = args[0];
+
+                switch (arg0) {
+                    case "reload": {
+                        // FlameCord - Collect ips from servers
+                        final Collection<String> whitelistedAddresses = new HashSet<>();
+
+                        for (final ServerInfo serverInfo : bungeeCord.getServers().values()) {
+                            whitelistedAddresses.add(serverInfo.getSocketAddress().toString());
+                        }
+
+                        FlameCord.reload(bungeeCord.getLogger(), whitelistedAddresses);
+                        sender.sendMessage(TextComponent
+                                .fromLegacyText("flamecord_reload"));
+                        break;
+                    }
+                    default: {
+                        sender.sendMessage(TextComponent.fromLegacyText("flamecord_help"));
+                        break;
+                    }
+                }
+            } else {
+                sender.sendMessage(TextComponent
+                        .fromLegacyText("flamecord_help"));
+            }
+        } else {
+            sender.sendMessage(TextComponent
+                    .fromLegacyText("flamecord_nopermission"));
+        }
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 031b21084..1dd53660a 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -9,6 +9,8 @@ import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+
+import dev._2lstudios.flamecord.FlameCord;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import io.github.waterfallmc.waterfall.event.ProxyExceptionEvent;
@@ -242,11 +244,12 @@ public class BungeeCord extends ProxyServer
         // Waterfall end
 
         pluginManager = new PluginManager( this );
-        getPluginManager().registerCommand( null, new CommandReload() );
-        getPluginManager().registerCommand( null, new CommandEnd() );
-        getPluginManager().registerCommand( null, new CommandIP() );
-        getPluginManager().registerCommand( null, new CommandBungee() );
-        getPluginManager().registerCommand( null, new CommandPerms() );
+        // FlameCord - We register commands in our new method
+        //getPluginManager().registerCommand( null, new CommandReload() );
+        //getPluginManager().registerCommand( null, new CommandEnd() );
+        //getPluginManager().registerCommand( null, new CommandIP() );
+        //getPluginManager().registerCommand( null, new CommandBungee() );
+        //getPluginManager().registerCommand( null, new CommandPerms() );
 
         if ( !Boolean.getBoolean( "net.md_5.bungee.native.disable" ) )
         {
@@ -295,6 +298,15 @@ public class BungeeCord extends ProxyServer
         pluginManager.loadPlugins();
         config.load();
 
+        // FlameCord - Renew and register modules
+        final Collection<String> whitelistedAddresses = new HashSet<>();
+
+        for (final ServerInfo serverInfo : getServers().values()) {
+            whitelistedAddresses.add(serverInfo.getSocketAddress().toString());
+        }
+
+        FlameCord.reload(logger, whitelistedAddresses);
+
         if ( config.isForgeSupport() )
         {
             registerChannel( ForgeConstants.FML_TAG );
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index da688839c..055a1d883 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -2,6 +2,8 @@ package net.md_5.bungee;
 
 import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
+
+import dev._2lstudios.flamecord.FlameCord;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import java.net.InetSocketAddress;
@@ -165,7 +167,7 @@ public class ServerConnector extends PacketHandler
     {
         if ( packet.packet == null )
         {
-            throw new QuietException( "Unexpected packet received during server login process!\n" + BufUtil.dump( packet.buf, 16 ) );
+            throw new QuietException( "Unexpected packet received during server connector process!\n" + BufUtil.dump(packet.buf, 16) );
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 94702434d..e48f77131 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -35,6 +35,7 @@ import net.md_5.bungee.api.SkinConfiguration;
 import net.md_5.bungee.api.Title;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.config.ListenerInfo;
 import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.api.event.PermissionCheckEvent;
@@ -66,6 +67,7 @@ import net.md_5.bungee.tab.ServerUnique;
 import net.md_5.bungee.tab.TabList;
 import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
+import net.md_5.bungee.util.QuietException;
 
 @RequiredArgsConstructor
 public final class UserConnection implements ProxiedPlayer
@@ -393,9 +395,11 @@ public final class UserConnection implements ProxiedPlayer
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, request.getConnectTimeout() )
                 .remoteAddress( target.getAddress() );
         // Windows is bugged, multi homed users will just have to live with random connecting IPs
-        if ( getPendingConnection().getListener().isSetLocalAddress() && !PlatformDependent.isWindows() && getPendingConnection().getListener().getSocketAddress() instanceof InetSocketAddress )
+        // FlameCord - Use listenerInfo
+        final ListenerInfo listenerInfo = getPendingConnection().getListener();
+        if ( listenerInfo.isSetLocalAddress() && !PlatformDependent.isWindows() && listenerInfo.getSocketAddress() instanceof InetSocketAddress )
         {
-            b.localAddress( getPendingConnection().getListener().getHost().getHostString(), 0 );
+            b.localAddress( listenerInfo.getHost().getHostString(), 0 );
         }
         b.connect().addListener( listener );
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 1c10b5a93..164357c34 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -21,6 +21,8 @@ import java.util.logging.Level;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 
+import dev._2lstudios.flamecord.FlameCord;
+
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.BungeeCord;
@@ -159,7 +161,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         if ( packet.packet == null )
         {
-            throw new QuietException( "Unexpected packet received during login process! " + BufUtil.dump( packet.buf, 16 ) );
+            throw new QuietException( "Unexpected packet received during server login process!\n" + BufUtil.dump(packet.buf, 16) );
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
index a409d440b..3503c089d 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
@@ -1,6 +1,7 @@
 package net.md_5.bungee.connection;
 
 import com.google.gson.Gson;
+
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.BungeeCord;
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 4820267b3..694ecdb01 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -1,6 +1,8 @@
 package net.md_5.bungee.netty;
 
 import com.google.common.base.Preconditions;
+
+import dev._2lstudios.flamecord.FlameCord;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import io.netty.handler.codec.CorruptedFrameException;
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index a95193ba7..a4c3bd710 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -1,6 +1,8 @@
 package net.md_5.bungee.netty;
 
 import com.google.common.base.Preconditions;
+
+import dev._2lstudios.flamecord.FlameCord;
 import io.github.waterfallmc.waterfall.event.ConnectionInitEvent;
 import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.Channel;
-- 
2.37.3.windows.1

